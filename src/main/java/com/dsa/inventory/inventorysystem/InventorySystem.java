/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dsa.inventory.inventorysystem;

import org.apache.commons.lang3.StringUtils;
import com.dsa.domain.ComboItem;
import com.dsa.domain.InventoryData;
import com.dsa.domain.PurchaseStatus;
import com.dsa.domain.StockLabelStatus;
import com.dsa.services.InventoryService;
import com.dsa.util.DatabaseConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author leniejoice
 */
public class InventorySystem extends javax.swing.JFrame {
    private DatabaseConnection dbConnection;
    private InventoryService inventoryService;

    /**
     * Creates new form MainUI
     */
    public InventorySystem() {
        initComponents();
        dbConnection = new DatabaseConnection(); // Initialize the DatabaseConnection
        inventoryService = new InventoryService(dbConnection);
        loadAllStockLabelStatus();
        loadAllPurchaseStatus();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        motorPH = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        dateEnteredLabel = new javax.swing.JLabel();
        stockLabel = new javax.swing.JLabel();
        brandLabel = new javax.swing.JLabel();
        engineNumberLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        dateValue = new javax.swing.JTextField();
        stockLabelDropdown = new javax.swing.JComboBox<>();
        purchaseStatusDropdown = new javax.swing.JComboBox<>();
        engineNumberValue = new javax.swing.JTextField();
        brandValue = new javax.swing.JTextField();
        viewAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(204, 51, 0));

        motorPH.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        motorPH.setForeground(new java.awt.Color(255, 255, 255));
        motorPH.setText("MOTORPH INVENTORY SYSTEM");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(motorPH, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(247, 247, 247))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(motorPH, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(204, 0, 0));
        deleteButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");

        clearButton.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        inventoryTable.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date Entered", "Stock Label ", "Brand", "Engine Number", "Status"
            }
        ));
        inventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inventoryTable);

        dateEnteredLabel.setText("Date Entered");

        stockLabel.setText("Stock Label");

        brandLabel.setText("Brand");

        engineNumberLabel.setText("Engine Number");

        statusLabel.setText("Status");

        dateValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateValueActionPerformed(evt);
            }
        });

        engineNumberValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineNumberValueActionPerformed(evt);
            }
        });

        brandValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandValueActionPerformed(evt);
            }
        });

        viewAll.setText("View Inventory");
        viewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(viewAll))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(228, 228, 228)
                                .addComponent(clearButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateEnteredLabel)
                                    .addComponent(stockLabel)
                                    .addComponent(statusLabel)
                                    .addComponent(engineNumberLabel)
                                    .addComponent(brandLabel)
                                    .addComponent(addButton))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dateValue)
                                            .addComponent(stockLabelDropdown, 0, 150, Short.MAX_VALUE)
                                            .addComponent(purchaseStatusDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(engineNumberValue)
                                            .addComponent(brandValue, javax.swing.GroupLayout.Alignment.TRAILING)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(updateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                                        .addComponent(deleteButton)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(viewAll)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateEnteredLabel)
                            .addComponent(dateValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stockLabel)
                            .addComponent(stockLabelDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(brandLabel)
                            .addComponent(brandValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(engineNumberLabel)
                            .addComponent(engineNumberValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusLabel)
                            .addComponent(purchaseStatusDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(updateButton)
                            .addComponent(deleteButton)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTable(){
        viewAllActionPerformed(null);
    }
 
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        InventoryData inventoryData = updateInventoryValues();
        inventoryService.saveInventoryData(inventoryData);
        
        JOptionPane.showMessageDialog(null, "Data added successfully!");
        clearButtonActionPerformed(null);
        refreshTable();
    }//GEN-LAST:event_addButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        dateValue.setText("");
        brandValue.setText("");
        engineNumberValue.setText("");
        purchaseStatusDropdown.setSelectedIndex(0);
        stockLabelDropdown.setSelectedIndex(0);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void engineNumberValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineNumberValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_engineNumberValueActionPerformed

    private void viewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllActionPerformed
        List<InventoryData> allInventory =  inventoryService.getAllInventory();
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        model.setRowCount(0);

        for(InventoryData inventoryData : allInventory) {
            Vector<Object> rowData = new Vector<>();
            rowData.add(inventoryData.getDate());
            rowData.add(inventoryData.getStockLabelStatus());
            rowData.add(inventoryData.getBrand());
            rowData.add(inventoryData.getEngineNumber());
            rowData.add(inventoryData.getPurchaseStatus());
            model.addRow(rowData);
        }
    }//GEN-LAST:event_viewAllActionPerformed

    private void dateValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateValueActionPerformed

    private void brandValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandValueActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {

            InventoryData inventoryData = updateInventoryValues();
            inventoryService.saveInventoryData(inventoryData);

            JOptionPane.showMessageDialog(null, "Data inventory has been successfully updated", "Update Successful", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        // Show error message if exception occurs
            JOptionPane.showMessageDialog(null, "Error updating inventory: " + e.getMessage(), "Update Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void inventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        int selectedIndex = inventoryTable.getSelectedRow();
        if (selectedIndex >= 0) { // Ensure a row is selected
            int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
            loadInventoryValues(id);
        }
    }//GEN-LAST:event_inventoryTableMouseClicked
    
    private void validateRequiredFields(InventoryData inventoryData){
        List<String> errors = new ArrayList();

        if(inventoryData.getDate()== null ){
           errors.add("Date Entered:");
        
        if(StringUtils.isEmpty(inventoryData.getBrand())){
           errors.add("Brand");
        }
        if(StringUtils.isEmpty(inventoryData.getEngineNumber())){
           errors.add("Engine Number");
        }
        }
        if(inventoryData.getPurchaseStatus()== null ){
           errors.add("Purchase Status");
        }
        if(inventoryData.getStockLabelStatus()== null ){
           errors.add("Stock Label Status");
        }
  
        if(!errors.isEmpty()){
            String errorMessage = "These fields are required: \n";
            for(String s: errors){
                errorMessage += s+"\n";
            }
            JOptionPane.showMessageDialog(this, errorMessage);
            throw new RuntimeException();
        }
    }




    private InventoryData updateInventoryValues(){
        String brand = brandValue.getText().trim() !=null ? brandValue.getText() : "";
        String engineNumber = engineNumberValue.getText().trim() !=null ?  engineNumberValue.getText().trim() : "";
        
        InventoryData inventoryData  = new InventoryData();
        
        inventoryData.setBrand(brand);
        inventoryData.setEngineNumber(engineNumber);
        try {
            // Parsing the string to java.util.Date
            java.util.Date utilDate = new SimpleDateFormat("yyyy-MM-dd").parse(dateValue.getText().trim());

            // Converting java.util.Date to java.sql.Date
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());

            // Setting the sqlDate to inventoryData
            inventoryData.setDateEntered(sqlDate);
        } catch (ParseException ex) {
            // Handle invalid date format
        }
        
        ComboItem stockStatusValue = (ComboItem) stockLabelDropdown.getSelectedItem();
        ComboItem purchaseStatusValue = (ComboItem) purchaseStatusDropdown.getSelectedItem();

        InventoryService inventoryService = new InventoryService(dbConnection);

        if (stockStatusValue != null && stockStatusValue.getKey() != null) {
            StockLabelStatus stockLabelStatus = inventoryService.getStockLabelStatusById(stockStatusValue.getKey());
            inventoryData.setStockLabelStatus(stockLabelStatus);
        }

        if (purchaseStatusValue != null && purchaseStatusValue.getKey() != null) {
            PurchaseStatus purchaseStatus = inventoryService.getPurchaseStatusById(purchaseStatusValue.getKey());
            inventoryData.setPurchaseStatus(purchaseStatus);
        }

        validateRequiredFields(inventoryData);
        
        return inventoryData;
    
    }
    
    private void loadInventoryValues(int id) {
        InventoryData inventoryData = inventoryService.getById(id);

        if (inventoryData == null) {
            JOptionPane.showMessageDialog(this, "No inventory data found for the given ID.");
            return; // Exit the method if no data is found
        }

        // Set the fields with the retrieved data
        dateValue.setText(inventoryData.getFormattedDate()); // Ensure this method exists and formats the date correctly
        brandValue.setText(inventoryData.getBrand());
        engineNumberValue.setText(inventoryData.getEngineNumber());

        // Reset dropdowns to default
        stockLabelDropdown.setSelectedIndex(0);
        purchaseStatusDropdown.setSelectedIndex(0);

        // Set the selected item for stock label status
        if (inventoryData.getStockLabelStatus() != null) {
            stockLabelDropdown.setSelectedItem(new ComboItem(inventoryData.getStockLabelStatus().getId(), inventoryData.getStockLabelStatus().getStockLabelStatus()));
        }

        // Set the selected item for purchase status
        if (inventoryData.getPurchaseStatus() != null) {
            purchaseStatusDropdown.setSelectedItem(new ComboItem(inventoryData.getPurchaseStatus().getId(), inventoryData.getPurchaseStatus().getPurchaseStatus()));
        }
    }
    
    private void loadAllStockLabelStatus(){
        List<StockLabelStatus> stockStatuses = inventoryService.getAllStockLabelStatus();
        stockLabelDropdown.addItem(new ComboItem(null,"Select Status"));
        for(StockLabelStatus stockLabelStatus : stockStatuses){
            stockLabelDropdown.addItem(new ComboItem(stockLabelStatus.getId(),stockLabelStatus.getStockLabelStatus()));
        }
    }
    
    private void loadAllPurchaseStatus(){
        List<PurchaseStatus> purchaseStatuses = inventoryService.getAllPurchaseStatus();
        purchaseStatusDropdown.addItem(new ComboItem(null,"Select Status"));
        for(PurchaseStatus purchaseStatus: purchaseStatuses){
            purchaseStatusDropdown.addItem(new ComboItem(purchaseStatus.getId(),purchaseStatus.getPurchaseStatus()));
        }
    }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventorySystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventorySystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel brandLabel;
    private javax.swing.JTextField brandValue;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel dateEnteredLabel;
    private javax.swing.JTextField dateValue;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel engineNumberLabel;
    private javax.swing.JTextField engineNumberValue;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel motorPH;
    private javax.swing.JComboBox<ComboItem> purchaseStatusDropdown;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel stockLabel;
    private javax.swing.JComboBox<ComboItem> stockLabelDropdown;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton viewAll;
    // End of variables declaration//GEN-END:variables
}
